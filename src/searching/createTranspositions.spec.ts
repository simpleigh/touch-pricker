/**
 * Free Touch Pricker
 * @author Leigh Simpson <code@simpleigh.com>
 * @license GPL-3.0
 * @copyright Copyright 2015-23 Leigh Simpson. All rights reserved.
 */

import { rounds, type Row, Stage } from '../rows';
import { Course, Methods } from '../stedman';
import createTranspositions from './createTranspositions';

const testMethod = (
    method: Methods.AbstractMethod,
    testCases: [Stage, Map<string, Row>][],
    inverseTestCases: [Stage, Map<string, Row>][],
): void => {
    describe(`createTranspositions for ${method.name}`, () => {
        for (const [stage, expected] of testCases) {
            it(`correctly transposes forwards on ${stage} bells`, () => {
                const course = new Course(rounds(stage), method);
                const transpositions = createTranspositions(
                    course,
                    method.searchCallingStrings,
                );
                expect(transpositions).toEqual(expected);
            });
        }

        for (const [stage, expected] of inverseTestCases) {
            it(`correctly transposes backwards on ${stage} bells`, () => {
                const course = new Course(rounds(stage), method);
                const transpositions = createTranspositions(
                    course,
                    method.searchCallingStrings,
                    true,
                );
                expect(transpositions).toEqual(expected);
            });
        }
    });
};

testMethod(
    new Methods.Carter(),
    [
        [
            Stage.Triples,
            new Map([
                ['  ', [6, 7, 1, 2, 4, 5, 3]],
                ['- ', [5, 6, 1, 2, 4, 7, 3]],
                ['s ', [5, 7, 1, 2, 4, 6, 3]],
                [' -', [6, 3, 1, 2, 4, 7, 5]],
                [' s', [6, 3, 1, 2, 4, 5, 7]],
                ['--', [5, 3, 1, 2, 4, 6, 7]],
                ['s-', [5, 3, 1, 2, 4, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                ['  ', [6, 8, 1, 2, 4, 9, 3, 7, 5]],
                ['- ', [6, 7, 1, 2, 4, 8, 3, 9, 5]],
                ['s ', [6, 7, 1, 2, 4, 9, 3, 8, 5]],
                [' -', [6, 8, 1, 2, 4, 5, 3, 9, 7]],
                [' s', [6, 8, 1, 2, 4, 5, 3, 7, 9]],
                ['--', [6, 7, 1, 2, 4, 5, 3, 8, 9]],
                ['s-', [6, 7, 1, 2, 4, 5, 3, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                ['  ', [6, 8, 1, 2, 4, 10, 3, 11, 5, 9, 7]],
                ['- ', [6, 8, 1, 2, 4, 9, 3, 10, 5, 11, 7]],
                ['s ', [6, 8, 1, 2, 4, 9, 3, 11, 5, 10, 7]],
                [' -', [6, 8, 1, 2, 4, 10, 3, 7, 5, 11, 9]],
                [' s', [6, 8, 1, 2, 4, 10, 3, 7, 5, 9, 11]],
                ['--', [6, 8, 1, 2, 4, 9, 3, 7, 5, 10, 11]],
                ['s-', [6, 8, 1, 2, 4, 9, 3, 7, 5, 11, 10]],
            ]),
        ],
    ],
    [
        [
            Stage.Triples,
            new Map([
                ['  ', [3, 4, 7, 5, 6, 1, 2]],
                ['- ', [3, 4, 7, 5, 1, 2, 6]],
                ['s ', [3, 4, 7, 5, 1, 6, 2]],
                [' -', [3, 4, 2, 5, 7, 1, 6]],
                [' s', [3, 4, 2, 5, 6, 1, 7]],
                ['--', [3, 4, 2, 5, 1, 6, 7]],
                ['s-', [3, 4, 2, 5, 1, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                ['  ', [3, 4, 7, 5, 9, 1, 8, 2, 6]],
                ['- ', [3, 4, 7, 5, 9, 1, 2, 6, 8]],
                ['s ', [3, 4, 7, 5, 9, 1, 2, 8, 6]],
                [' -', [3, 4, 7, 5, 6, 1, 9, 2, 8]],
                [' s', [3, 4, 7, 5, 6, 1, 8, 2, 9]],
                ['--', [3, 4, 7, 5, 6, 1, 2, 8, 9]],
                ['s-', [3, 4, 7, 5, 6, 1, 2, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                ['  ', [3, 4, 7, 5, 9, 1, 11, 2, 10, 6, 8]],
                ['- ', [3, 4, 7, 5, 9, 1, 11, 2, 6, 8, 10]],
                ['s ', [3, 4, 7, 5, 9, 1, 11, 2, 6, 10, 8]],
                [' -', [3, 4, 7, 5, 9, 1, 8, 2, 11, 6, 10]],
                [' s', [3, 4, 7, 5, 9, 1, 8, 2, 10, 6, 11]],
                ['--', [3, 4, 7, 5, 9, 1, 8, 2, 6, 10, 11]],
                ['s-', [3, 4, 7, 5, 9, 1, 8, 2, 6, 11, 10]],
            ]),
        ],
    ],
);

testMethod(
    new Methods.Erin(),
    [
        [
            Stage.Triples,
            new Map([
                [' ', [2, 4, 1, 6, 3, 7, 5]],
                ['-', [2, 4, 1, 5, 3, 6, 7]],
                ['s', [2, 4, 1, 5, 3, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                [' ', [2, 4, 1, 6, 3, 8, 5, 9, 7]],
                ['-', [2, 4, 1, 6, 3, 7, 5, 8, 9]],
                ['s', [2, 4, 1, 6, 3, 7, 5, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                [' ', [2, 4, 1, 6, 3, 8, 5, 10, 7, 11, 9]],
                ['-', [2, 4, 1, 6, 3, 8, 5, 9, 7, 10, 11]],
                ['s', [2, 4, 1, 6, 3, 8, 5, 9, 7, 11, 10]],
            ]),
        ],
    ],
    [
        [
            Stage.Triples,
            new Map([
                [' ', [3, 1, 5, 2, 7, 4, 6]],
                ['-', [3, 1, 5, 2, 4, 6, 7]],
                ['s', [3, 1, 5, 2, 4, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                [' ', [3, 1, 5, 2, 7, 4, 9, 6, 8]],
                ['-', [3, 1, 5, 2, 7, 4, 6, 8, 9]],
                ['s', [3, 1, 5, 2, 7, 4, 6, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                [' ', [3, 1, 5, 2, 7, 4, 9, 6, 11, 8, 10]],
                ['-', [3, 1, 5, 2, 7, 4, 9, 6, 8, 10, 11]],
                ['s', [3, 1, 5, 2, 7, 4, 9, 6, 8, 11, 10]],
            ]),
        ],
    ],
);

testMethod(
    new Methods.Stedman(),
    [
        [
            Stage.Triples,
            new Map([
                ['  ', [2, 4, 6, 7, 1, 5, 3]],
                ['- ', [2, 4, 5, 6, 1, 7, 3]],
                ['s ', [2, 4, 5, 7, 1, 6, 3]],
                [' -', [2, 4, 6, 3, 1, 7, 5]],
                [' s', [2, 4, 6, 3, 1, 5, 7]],
                ['--', [2, 4, 5, 3, 1, 6, 7]],
                ['s-', [2, 4, 5, 3, 1, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                ['  ', [2, 4, 6, 8, 1, 9, 3, 7, 5]],
                ['- ', [2, 4, 6, 7, 1, 8, 3, 9, 5]],
                ['s ', [2, 4, 6, 7, 1, 9, 3, 8, 5]],
                [' -', [2, 4, 6, 8, 1, 5, 3, 9, 7]],
                [' s', [2, 4, 6, 8, 1, 5, 3, 7, 9]],
                ['--', [2, 4, 6, 7, 1, 5, 3, 8, 9]],
                ['s-', [2, 4, 6, 7, 1, 5, 3, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                ['  ', [2, 4, 6, 8, 1, 10, 3, 11, 5, 9, 7]],
                ['- ', [2, 4, 6, 8, 1, 9, 3, 10, 5, 11, 7]],
                ['s ', [2, 4, 6, 8, 1, 9, 3, 11, 5, 10, 7]],
                [' -', [2, 4, 6, 8, 1, 10, 3, 7, 5, 11, 9]],
                [' s', [2, 4, 6, 8, 1, 10, 3, 7, 5, 9, 11]],
                ['--', [2, 4, 6, 8, 1, 9, 3, 7, 5, 10, 11]],
                ['s-', [2, 4, 6, 8, 1, 9, 3, 7, 5, 11, 10]],
            ]),
        ],
    ],
    [
        [
            Stage.Triples,
            new Map([
                ['  ', [5, 1, 7, 2, 6, 3, 4]],
                ['- ', [5, 1, 7, 2, 3, 4, 6]],
                ['s ', [5, 1, 7, 2, 3, 6, 4]],
                [' -', [5, 1, 4, 2, 7, 3, 6]],
                [' s', [5, 1, 4, 2, 6, 3, 7]],
                ['--', [5, 1, 4, 2, 3, 6, 7]],
                ['s-', [5, 1, 4, 2, 3, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                ['  ', [5, 1, 7, 2, 9, 3, 8, 4, 6]],
                ['- ', [5, 1, 7, 2, 9, 3, 4, 6, 8]],
                ['s ', [5, 1, 7, 2, 9, 3, 4, 8, 6]],
                [' -', [5, 1, 7, 2, 6, 3, 9, 4, 8]],
                [' s', [5, 1, 7, 2, 6, 3, 8, 4, 9]],
                ['--', [5, 1, 7, 2, 6, 3, 4, 8, 9]],
                ['s-', [5, 1, 7, 2, 6, 3, 4, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                ['  ', [5, 1, 7, 2, 9, 3, 11, 4, 10, 6, 8]],
                ['- ', [5, 1, 7, 2, 9, 3, 11, 4, 6, 8, 10]],
                ['s ', [5, 1, 7, 2, 9, 3, 11, 4, 6, 10, 8]],
                [' -', [5, 1, 7, 2, 9, 3, 8, 4, 11, 6, 10]],
                [' s', [5, 1, 7, 2, 9, 3, 8, 4, 10, 6, 11]],
                ['--', [5, 1, 7, 2, 9, 3, 8, 4, 6, 10, 11]],
                ['s-', [5, 1, 7, 2, 9, 3, 8, 4, 6, 11, 10]],
            ]),
        ],
    ],
);

testMethod(
    new Methods.StedmanJump(),
    [
        [
            Stage.Triples,
            new Map([
                ['  ', [4, 6, 2, 7, 1, 5, 3]],
                ['- ', [4, 5, 2, 6, 1, 7, 3]],
                ['s ', [4, 5, 2, 7, 1, 6, 3]],
                [' -', [4, 6, 2, 3, 1, 7, 5]],
                [' s', [4, 6, 2, 3, 1, 5, 7]],
                ['--', [4, 5, 2, 3, 1, 6, 7]],
                ['s-', [4, 5, 2, 3, 1, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                ['  ', [4, 6, 2, 8, 1, 9, 3, 7, 5]],
                ['- ', [4, 6, 2, 7, 1, 8, 3, 9, 5]],
                ['s ', [4, 6, 2, 7, 1, 9, 3, 8, 5]],
                [' -', [4, 6, 2, 8, 1, 5, 3, 9, 7]],
                [' s', [4, 6, 2, 8, 1, 5, 3, 7, 9]],
                ['--', [4, 6, 2, 7, 1, 5, 3, 8, 9]],
                ['s-', [4, 6, 2, 7, 1, 5, 3, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                ['  ', [4, 6, 2, 8, 1, 10, 3, 11, 5, 9, 7]],
                ['- ', [4, 6, 2, 8, 1, 9, 3, 10, 5, 11, 7]],
                ['s ', [4, 6, 2, 8, 1, 9, 3, 11, 5, 10, 7]],
                [' -', [4, 6, 2, 8, 1, 10, 3, 7, 5, 11, 9]],
                [' s', [4, 6, 2, 8, 1, 10, 3, 7, 5, 9, 11]],
                ['--', [4, 6, 2, 8, 1, 9, 3, 7, 5, 10, 11]],
                ['s-', [4, 6, 2, 8, 1, 9, 3, 7, 5, 11, 10]],
            ]),
        ],
    ],
    [
        [
            Stage.Triples,
            new Map([
                ['  ', [5, 3, 7, 1, 6, 2, 4]],
                ['- ', [5, 3, 7, 1, 2, 4, 6]],
                ['s ', [5, 3, 7, 1, 2, 6, 4]],
                [' -', [5, 3, 4, 1, 7, 2, 6]],
                [' s', [5, 3, 4, 1, 6, 2, 7]],
                ['--', [5, 3, 4, 1, 2, 6, 7]],
                ['s-', [5, 3, 4, 1, 2, 7, 6]],
            ]),
        ],
        [
            Stage.Caters,
            new Map([
                ['  ', [5, 3, 7, 1, 9, 2, 8, 4, 6]],
                ['- ', [5, 3, 7, 1, 9, 2, 4, 6, 8]],
                ['s ', [5, 3, 7, 1, 9, 2, 4, 8, 6]],
                [' -', [5, 3, 7, 1, 6, 2, 9, 4, 8]],
                [' s', [5, 3, 7, 1, 6, 2, 8, 4, 9]],
                ['--', [5, 3, 7, 1, 6, 2, 4, 8, 9]],
                ['s-', [5, 3, 7, 1, 6, 2, 4, 9, 8]],
            ]),
        ],
        [
            Stage.Cinques,
            new Map([
                ['  ', [5, 3, 7, 1, 9, 2, 11, 4, 10, 6, 8]],
                ['- ', [5, 3, 7, 1, 9, 2, 11, 4, 6, 8, 10]],
                ['s ', [5, 3, 7, 1, 9, 2, 11, 4, 6, 10, 8]],
                [' -', [5, 3, 7, 1, 9, 2, 8, 4, 11, 6, 10]],
                [' s', [5, 3, 7, 1, 9, 2, 8, 4, 10, 6, 11]],
                ['--', [5, 3, 7, 1, 9, 2, 8, 4, 6, 10, 11]],
                ['s-', [5, 3, 7, 1, 9, 2, 8, 4, 6, 11, 10]],
            ]),
        ],
    ],
);
