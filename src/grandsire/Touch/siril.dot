/**
 * Free Touch Pricker
 * @author Leigh Simpson <code@simpleigh.com>
 * @license GPL-3.0
 * @copyright Copyright 2015-23 Leigh Simpson. All rights reserved.
 */

/**
 * Renders a touch for consumption by siril-based provers
 * @param {number}  touchRows  rows in the touch
 * @param {enum}    Call       enum for calls
 */

{{
	var courseNames = [ ];

	context.touchRows = context.touchRows || Infinity;
}}

/* Header */
// Generated by Free Touch Pricker{{= '\n' }}
// https://github.com/simpleigh/touch-pricker{{= '\n' }}
{{= '\n' }}

/* Output touch as comments */
// {{= context.stringFromRow(context.object.initialRow) }}{{= '\n' }}
{{~ context.object.blocks :course }}
	// {{= course.print('text') }}{{= '\n' }}
{{~}}
{{= '\n' }}

/* Number of bells */
{{= context.object.stage }} bells{{= '\n' }}
{{= '\n' }}

/* MicroSIRIL will prove the first symbol in the file, so define it */
composition = touch{{= '\n' }}
{{= '\n' }}

/* Leads */
plain = +{{= context.object.callNotations[context.Call.Plain].join('.')}}{{= '\n' }}
bob = +{{= context.object.callNotations[context.Call.Bob].join('.')}}{{= '\n' }}
single = +{{= context.object.callNotations[context.Call.Single].join('.')}}{{= '\n' }}
{{= '\n' }}

/* Course definitions */
{{~ context.object.blocks :course:index }}
	course{{= index + 1 }} =
	 /* single space */
	{{= course.print('siril', { touchRows: context.touchRows }) }}
	{{ courseNames.push('course' + (index + 1)); }}

	{{ context.touchRows -= course.rows; }}
	{{? context.touchRows <= 0 }}
		{{ break; }}
	{{?}}
{{~}}
{{= '\n' }}

/* Touch - all the courses */
touch = {{= courseNames.join(', ') }}{{= '\n' }}
{{= '\n' }}

/* Define the touch to prove for GSiril */
prove touch{{= '\n' }}
